
const action = process.argv[2];

let helpText = [
	"node sorter.js <action> <args> ...",
	"               download",
	"                        -q --quiet:           no output",
	"                        -s --savefile <file>: file to save to. Provide nothing to disable saving. default: beatsaver-songs.json",
	"                        -m --max <int>:       maximum downloaded songs, defaults to 20000",
	"               sort",
	"                        -q --quiet:              no output",
	"                        -d --download:           download new songs. If no -l or -load argument then this is done automatically.",
	"                           --dlsave <file>:      save downloaded songs",
	"                           --dlmax <int>:        maximum number of songs to download",
	"                        -l --load <file>:        load songs from file",
	"                        -s --save <file>:        save sorted songs to file",
	"                        -m --max <int>:          maximum number of songs to display (if non-quiet)",
	"                           --daypoints <number>: points a song gets for each day it has not existed",
	"                           --playbase <number>:  base of log for number of plays. default: 11",
	"                           --scorebase <number>: base of log for upvotes-downvotes. default: 6",
	"                           --mindate <date>:     minimum date/time for displayed songs",
	"                           --maxdate <date>:     maximum date/time for displayed songs",
	"                           --songsfolder <file>: Tracks in the songsfolder will be filtered out",
	"                        -p --playlist <file>:    if provided, saves as playlist to given file",
	"                        -t --title <string>:     playlist title. default: Autogenerated Playlist",
	"                        -a --author <string>:    playlist author. default: Auto",
	"                        -c --count <int>:        playlist length",
];

let actions = {
	download: true,
	sort: true,
}

if (!action || !actions[action]) {
	for (let str of helpText) {
		console.log(str);
	}
	return;
}

let argsArray = process.argv.slice(3);

function processArgs(settings) {
	let lastKey = {};
	for (let str of argsArray) {
		if (str.substring(0, 2) == "--") {
			let key = str.substring(2).toLowerCase();
			lastKey = {};
			lastKey[key] = true;
			settings.hasKey(key);
		}
		else if (str.substring(0, 1) == "-") {
			lastKey = {};
			for (let i = 1; i < str.length; i++) {
				let key = str.substring(i, i + 1);
				lastKey[key] = true;
				settings.hasKey(key);
			}
		} else {
			settings.arg(str, lastKey);
		}
	}
}

const tools = require("./tools.js");

if (action == "download") {
	let saveFile = "beatsaver-songs.json";
	let max = 20000;
	let silent = false;
	processArgs({
		hasKey: async function(key) {
			if (key == 'q' || key == 'quiet') {
				silent = true;
			} else if (key == 's' || key == 'savefile') {
				saveFile = 'undefined';
			}
		},
		arg: async function(arg, keys) {
			if (keys.save || keys.s) {
				saveFile = arg;
			}
			let argNumber = Number(arg);
			if (argNumber == argNumber && (keys.max || key.m)) {
				max = Math.floor(argNumber);
			}
		},
	});
	(async function() {
		await tools.download({
			downloadedCallback: function(info) {
				if (!silent) {
					console.log(`Downloaded ${info.songs.length}/${info.response.total}`);
				}
			},
			retryCallback: function(info) {
				if (!silent) {
					console.log(`Retrying ${info.index}-${info.index + 20} for the ${info.attempt} time...`);
				}
			},
			saveFile: saveFile,
			max: max,
		});
	})();
} else if (action == "sort") {
	let max;
	let songs;
	let downloadsSaveFile;
	let songsFolder;
	let maxDate, minDate;
	let loadFile;
	let saveFile;
	let pointsPerDay;
	let playedBase;
	let scoreBase;
	let silent = false;
	let maxDisplay;
	let playlist;
	let title;
	let author;
	let count;
	processArgs({
		hasKey: function(key) {
			if (key == 'q' || key == 'quiet') {
				silent = true;
			}
			if (key == 'd' || key == 'download') {
				songs = true;
			}
		},
		arg: function(arg, keys) {
			if (keys.load || keys.l) {
				loadFile = arg;
			}
			if (keys.save || keys.s) {
				saveFile = arg;
			}
			if (keys.dlsave) {
				saveFile = arg;
			}
			if (keys.playlist || keys.p) {
				playlist = arg;
			}
			if (keys.title || keys.t) {
				title = arg;
			}
			if (keys.author || keys.a) {
				author = arg;
			}
			if (keys.songsfolder || keys.f) {
				songsFolder = arg;
			}
			let argNumber = Number(arg);
			if (argNumber == argNumber) {
				if (keys.dlmax) {
					max = Math.floor(argNumber);
				}
				if (keys.max || keys.m) {
					maxDisplay = Math.floor(argNumber);
				}
				if (keys.daypoints) {
					pointsPerDay = argNumber;
				}
				if (keys.playbase) {
					playedBase = argNumber;
				}
				if (keys.scorebase) {
					scoreBase = argNumber;
				}
				if (keys.c || keys.count) {
					count = Math.floor(argNumber);
				}
			}
			let argDate = Date.parse(arg);
			if (argDate == argDate) {
				if (keys.maxdate) {
					maxDate = new Date(argDate);
				}
				if (keys.mindate) {
					minDate = new Date(argDate);
				}
			}
		},
	});
	if (!loadFile && songs == undefined) {
		songs = true;
	}
	(async function() {
		if (songs) {
			songs = await tools.download({
				downloadedCallback: async function(info) {
					if (!silent) {
						console.log(`Downloaded ${info.songs.length}/${info.response.total}`);
					}
				},
				retryCallback: async function(info) {
					if (!silent) {
						console.log(`Retrying ${info.index}-${info.index + 20} for the ${info.attempt} time...`);
					}
				},
				saveFile: downloadsSaveFile,
				max: max,
			});
			songs = songs.songs;
		}
		let sorted = await tools.sort({
			songs: songs,
			loadFile: loadFile,
			saveFile: saveFile,
			pointsPerDay: pointsPerDay,
			playedBase: playedBase,
			scoreBase: scoreBase,
			minDate: minDate,
			maxDate: maxDate,
			display: !silent,
			maxDisplay: maxDisplay,
		});
		if (playlist) {
			await tools.playlist({
				title: title,
				author: author,
				songs: sorted.songs,
				saveFile: playlist,
				count: count,
			});
			if (!silent) {
				console.log(`Saved playlist to ${playlist}`);
			}
		}
	})();
}